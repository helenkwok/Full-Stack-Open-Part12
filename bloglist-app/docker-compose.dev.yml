version: '3.8'

services:
  app:
      image: bloglist-frontend-dev
      build:
        context: ./bloglist-frontend/ # The context will pick this directory as the "build context"
        dockerfile: dev.Dockerfile # This will simply tell which dockerfile to read
      volumes:
        - ./bloglist-frontend:/usr/src/app # The path can be relative, so ./ is enough to say "the same location as the docker-compose.dev.yml"
      ports:
        - 3000:3000
      environment:
        - CHOKIDAR_USEPOLLING=true
        - REACT_APP_BACKEND_URL=//localhost:8080/api/
      container_name: bloglist-frontend-dev

  nginx:
      image: nginx:1.20.1
      volumes:
        - ./nginx.conf:/etc/nginx/nginx.conf:ro
      ports:
        - 8080:80
      container_name: bloglist-reverse-proxy
      depends_on:
        - app # wait for the frontend container to be started

  server:
    image: bloglist-backend-dev
    build:
      context: ./bloglist-backend/ # The context will pick this directory as the "build context"
      dockerfile: dev.Dockerfile # This will simply tell which dockerfile to read
    volumes:
      - ./bloglist-backend:/usr/src/app # The path can be relative, so ./ is enough to say "the same location as the docker-compose.dev.yml"
    ports:
      - 3003:3003
    depends_on:
      - "mongo"
    environment:
      - MONGO_URL=mongodb://the_username:the_password@mongo:27017/the_database
    container_name: bloglist-backend-dev

  mongo:
    image: mongo
    ports:
     - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: the_database
    volumes:
      - ./bloglist-backend/mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
      - mongo_data:/data/db

volumes:
  mongo_data: